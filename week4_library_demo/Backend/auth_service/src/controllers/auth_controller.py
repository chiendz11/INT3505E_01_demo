import json
from flask import Blueprint, request, jsonify, current_app, make_response, redirect, session
from ..services.auth_service import AuthService
from ..services.oauth_service import oauth, OAuthService
from authlib.integrations.flask_client import OAuth
from urllib.parse import quote

auth_bp = Blueprint('auth_bp', __name__)

@auth_bp.route('/register', methods=['POST'])
def register():
    data = request.json
    email = data.get('email')
    username = data.get('username')
    password = data.get('password')

    if not all([email, username, password]):
        return jsonify({"error": "Email, username, v√† password l√† b·∫Øt bu·ªôc"}), 400

    service = AuthService()
    user, error = service.register_user(email, username, password)
    if error:
        return jsonify({"error": error}), 409 # 409 Conflict
        
    return jsonify({"message": "ƒêƒÉng k√Ω th√†nh c√¥ng", "user_id": user.id}), 201

@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.json
    login_identifier = data.get('login')
    password = data.get('password')

    if not all([login_identifier, password]):
        return jsonify({"error": "Login v√† password l√† b·∫Øt bu·ªôc"}), 400

    service = AuthService()
    # [FIX] Nh·∫≠n 4 gi√° tr·ªã tr·∫£ v·ªÅ, bao g·ªìm c·∫£ object 'user'
    user, access_token, refresh_token_data, error = service.login_user(login_identifier, password)

    if error:
        return jsonify({"error": error}), 401

    # [FIX] T·∫°o m·ªôt dictionary an to√†n ch·ª©a th√¥ng tin user ƒë·ªÉ g·ª≠i v·ªÅ client
    user_profile = {
        "id": user.id,
        "email": user.email,
        "username": user.username,
        "role": user.role
    }
    
    # [FIX] Th√™m object 'user' v√†o trong body c·ªßa response JSON
    response = make_response(jsonify({
        "access_token": access_token,
        "user": user_profile
    }))
    
    # G·ª≠i refresh token qua cookie (HttpOnly, Secure)
    response.set_cookie(
        "refresh_token",
        refresh_token_data['token'], # L·∫•y token t·ª´ dictionary
        httponly=True,
        secure=True, 
        samesite='None',
        path='/api/auth/tokens' # Ch·ªâ g·ª≠i cookie n√†y khi g·ªçi API refresh
    )
    return response

@auth_bp.route('/v2/login', methods=['POST'])
def login_v2():
    """[V2] ƒêƒÉng nh·∫≠p, tr·∫£ v·ªÅ th√¥ng tin user ƒë·∫ßy ƒë·ªß (th√™m full_name, avatar_url)."""
    data = request.json
    login_identifier = data.get('login')
    password = data.get('password')

    if not all([login_identifier, password]):
        return jsonify({"error": "Login v√† password l√† b·∫Øt bu·ªôc"}), 400

    service = AuthService()
    # [T√ÅI S·ª¨ D·ª§NG] V·∫´n g·ªçi service y h·ªát V1
    user, access_token, refresh_token_data, error = service.login_user(login_identifier, password)

    if error:
        return jsonify({"error": error}), 401

    # [V2] Response: Tr·∫£ v·ªÅ nhi·ªÅu th√¥ng tin h∆°n
    # (Gi·∫£ s·ª≠ model User c·ªßa b·∫°n c√≥ 2 tr∆∞·ªùng 'full_name' v√† 'avatar_url')
    user_profile_v2 = {
        "id": user.id,
        "email": user.email,
        "username": user.username,
        "role": user.role,
        "full_name": getattr(user, 'full_name', None), # D√πng getattr ƒë·ªÉ tr√°nh l·ªói n·∫øu tr∆∞·ªùng kh√¥ng t·ªìn t·∫°i
        "avatar_url": getattr(user, 'avatar_url', None)
    }
    
    response = make_response(jsonify({
        "access_token": access_token,
        "user": user_profile_v2 # G·ª≠i object user v2
    }))
    
    # G·ª≠i refresh token qua cookie (HttpOnly, Secure)
    response.set_cookie(
        "refresh_token",
        refresh_token_data['token'], 
        httponly=True,
        secure=True, 
        samesite='None',
        path='/api/auth/tokens' # V·∫´n d√πng chung path refresh
    )
    return response

@auth_bp.route('/refresh', methods=['PUT'])
def refresh():
    refresh_token = request.cookies.get('refresh_token')
    if not refresh_token:
        return jsonify({"error": "Thi·∫øu refresh token trong cookie"}), 401

    service = AuthService()
    access_token, error = service.refresh_access_token(refresh_token)

    if error:
        return jsonify({"error": error}), 401

    # C√≥ th·ªÉ set l·∫°i cookie m·ªõi n·∫øu b·∫°n mu·ªën refresh lu√¥n refresh_token
    response = jsonify({"access_token": access_token})
    return response, 200

@auth_bp.route('/logout', methods=['DELETE'])
def logout():
    data = request.json
    refresh_token = data.get('refresh_token')
    if not refresh_token:
        return jsonify({"error": "Refresh token l√† b·∫Øt bu·ªôc"}), 400

    service = AuthService()
    success, error = service.logout_user(refresh_token)
    
    if error:
        return jsonify({"error": error}), 401
    
    return jsonify({"message": "ƒêƒÉng xu·∫•t th√†nh c√¥ng"}), 200

@auth_bp.route('/validate', methods=['POST'])
def validate_token():
    """
    Endpoint N·ªòI B·ªò, ch·ªâ API Gateway ƒë∆∞·ª£c g·ªçi.
    Gateway s·∫Ω g·ª≠i access token ƒë·∫øn ƒë√¢y ƒë·ªÉ x√°c th·ª±c.
    """
    token = request.headers.get('Authorization')
    if not token or not token.startswith('Bearer '):
        return jsonify({"error": "Missing or invalid token"}), 401
    
    access_token = token.split(" ")[1]

    service = AuthService()
    user_data, error = service.validate_access_token(access_token)
    
    if error:
        return jsonify({"error": error, "valid": False}), 401
        
    # Tr·∫£ v·ªÅ th√¥ng tin user cho Gateway
    return jsonify({"valid": True, "user": user_data}), 200


@auth_bp.route("/google/login")
def google_login():
    """B∆∞·ªõc 1: Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn Google"""

    redirect_uri = current_app.config["GOOGLE_REDIRECT_URI"]
    print("‚úÖ Explicit Redirect URI being sent to Google:", redirect_uri) # In ra ƒë·ªÉ x√°c nh·∫≠n


    # ‚úÖ G·ªçi authorize_redirect ƒë·ªÉ l·∫•y response redirect (302)
    # authlib s·∫Ω d√πng redirect_uri n√†y ƒë·ªÉ g·ª≠i cho Google
    response = oauth.google.authorize_redirect(redirect_uri)

    # ‚úÖ Force Flask ghi cookie session ngay c·∫£ khi l√† redirect
    # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o nonce ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi tr√¨nh duy·ªát r·ªùi ƒëi
    current_app.session_interface.save_session(current_app, session, response)

    return response


@auth_bp.route("/google/callback")
def google_callback():
    """B∆∞·ªõc 2: Google redirect v·ªÅ ƒë√¢y"""
    frontend_url = "http://localhost:5174/login"

    try:
        token = oauth.google.authorize_access_token() #Trao ƒë·ªïi code l·∫•y access token (authorize_access_token)
        user_info = token.get('userinfo') # L·∫•y th√¥ng tin user t·ª´ Google
        print("‚úÖ User info:", user_info)

        service = OAuthService() # X·ª≠ l√Ω th√¥ng tin user t·ª´ Google
        result = service.handle_google_user(user_info) # T·∫°o ho·∫∑c l·∫•y user t·ª´ th√¥ng tin Google

        # G·ª≠i d·ªØ li·ªáu user + token v·ªÅ frontend qua redirect
        user_json = quote(json.dumps(result["user"]))
        redirect_url = f"{frontend_url}#accessToken={result['access_token']}&user={user_json}"

        response = make_response(redirect(redirect_url)) 
        response.set_cookie(
            "refresh_token",
            result["refresh_token"], 
            httponly=True,
            secure=False,    # True n·∫øu ch·∫°y HTTPS 
            samesite="Lax",  # 'None' n·∫øu frontend kh√°c domain
            path="/api/auth/tokens"
        )
        return response

    except Exception as e:
        print(f"üî• Google OAuth callback error: {e}")
        return redirect(f"{frontend_url}#error=google_login_failed")
